%{ if use_cert_manager ~}
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: kiali
  namespace: ${namespace}
spec:
  secretName: kiali-cert
  commonName: kiali.${domain_name}
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  dnsNames:
  - kiali.${domain_name}
---
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: kubeflow
  namespace: ${namespace}
spec:
  secretName: kubeflow-cert
  commonName: kubeflow.${domain_name}
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  dnsNames:
  - kubeflow.${domain_name}
---
%{ endif }
%{ if credential_name != "" || use_cert_manager }
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: kiali-gateway
  namespace: ${namespace}
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 443
      name: https-kiali
      protocol: HTTPS
    tls:
      mode: SIMPLE
      credentialName: %{ if use_cert_manager ~}kiali-cert%{ else ~}${credential_name}%{ endif }
    hosts:
    - kiali.${domain_name}
---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: kubeflow-gateway
  namespace: ${namespace}
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 443
      name: https
      protocol: HTTPS
    tls:
      mode: SIMPLE
      credentialName: %{ if use_cert_manager ~}kubeflow-cert%{ else ~}${credential_name}%{ endif }
    hosts:
      - kubeflow.${domain_name}
---
%{ endif }
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: kiali-vs
  namespace: ${namespace}
spec:
  hosts:
  - kubeflow.${domain_name}
  gateways:
  - kubeflow-gateway
  http:
  - match:
      - uri:
          prefix: /kiali/
    rewrite:
      uri: /kiali/
    route:
    - destination:
        host: kiali
        port:
          number: 20001
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: kiali
  namespace: ${namespace}
spec:
  host: kiali
  trafficPolicy:
    tls:
      mode: DISABLE